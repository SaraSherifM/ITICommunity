// <auto-generated />
using System;
using ITICommunity.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITICommunity.Migrations
{
    [DbContext(typeof(ITICommunityContext))]
    [Migration("20200210141407_editBD")]
    partial class editBD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITICommunity.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchLocation")
                        .HasColumnName("branchLocation")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("ITICommunity.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CommentBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("PostId")
                        .HasColumnName("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ITICommunity.Models.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("ITICommunity.Models.Follow", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FollowingId")
                        .HasColumnName("FollowingID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follow");
                });

            modelBuilder.Entity("ITICommunity.Models.Intake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Intake1")
                        .HasColumnName("Intake")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Intake");
                });

            modelBuilder.Entity("ITICommunity.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnName("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnName("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("ITICommunity.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("ITICommunity.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<int?>("IntakeId")
                        .HasColumnName("IntakeID")
                        .HasColumnType("int");

                    b.Property<string>("Track1")
                        .HasColumnName("Track")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("IntakeId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("ITICommunity.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Cvfile")
                        .HasColumnName("CVFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("IntakeId")
                        .HasColumnName("IntakeID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrackId")
                        .HasColumnName("trackID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UserTypeId")
                        .HasColumnName("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntakeId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ITICommunity.Models.UserContacts", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ContactDetails")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ContactTypeId")
                        .HasColumnName("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("Hide")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("ITICommunity.Models.UserEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEducation");
                });

            modelBuilder.Entity("ITICommunity.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("ITICommunity.Models.UserWorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyLocation")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWorkExperience");
                });

            modelBuilder.Entity("ITICommunity.Models.Comment", b =>
                {
                    b.HasOne("ITICommunity.Models.Post", "Post")
                        .WithMany("Comment")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Comment_Post");

                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Comment_User");
                });

            modelBuilder.Entity("ITICommunity.Models.Follow", b =>
                {
                    b.HasOne("ITICommunity.Models.User", "Following")
                        .WithMany("FollowFollowing")
                        .HasForeignKey("FollowingId")
                        .HasConstraintName("FK_Follow_User1")
                        .IsRequired();

                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("FollowUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Follow_User")
                        .IsRequired();
                });

            modelBuilder.Entity("ITICommunity.Models.Like", b =>
                {
                    b.HasOne("ITICommunity.Models.Comment", "Comment")
                        .WithMany("Like")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Like_Comment");

                    b.HasOne("ITICommunity.Models.Post", "Post")
                        .WithMany("Like")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Like_Post");

                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("Like")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Like_User");
                });

            modelBuilder.Entity("ITICommunity.Models.Post", b =>
                {
                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("Post")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_User");
                });

            modelBuilder.Entity("ITICommunity.Models.Track", b =>
                {
                    b.HasOne("ITICommunity.Models.Branch", "Branch")
                        .WithMany("Track")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Track_Branch");

                    b.HasOne("ITICommunity.Models.Intake", "Intake")
                        .WithMany("Track")
                        .HasForeignKey("IntakeId")
                        .HasConstraintName("FK_Track_Intake");
                });

            modelBuilder.Entity("ITICommunity.Models.User", b =>
                {
                    b.HasOne("ITICommunity.Models.Intake", "Intake")
                        .WithMany("User")
                        .HasForeignKey("IntakeId")
                        .HasConstraintName("FK_User_Intake");

                    b.HasOne("ITICommunity.Models.UserType", "UserType")
                        .WithMany("User")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK_User_UserType");
                });

            modelBuilder.Entity("ITICommunity.Models.UserContacts", b =>
                {
                    b.HasOne("ITICommunity.Models.ContactType", "ContactType")
                        .WithMany("UserContacts")
                        .HasForeignKey("ContactTypeId")
                        .HasConstraintName("FK_UserContacts_ContactType");

                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserContacts_User");
                });

            modelBuilder.Entity("ITICommunity.Models.UserEducation", b =>
                {
                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("UserEducation")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserEducation_User");
                });

            modelBuilder.Entity("ITICommunity.Models.UserWorkExperience", b =>
                {
                    b.HasOne("ITICommunity.Models.User", "User")
                        .WithMany("UserWorkExperience")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserWorkExperience_User");
                });
#pragma warning restore 612, 618
        }
    }
}
